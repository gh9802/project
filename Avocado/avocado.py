# -*- coding: utf-8 -*-
"""Avocado.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qmfXNP5qu22GBeinKlcbRywdQHPPRiXv
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install --upgrade pip --user
!pip install "mxnet_cu101<2.0.0, >=1.7.0"
!pip install autogluon

!pip install auto-sklearn==0.10.0

!pip install tpot

!pip3 install graphviz==0.15.0
import graphviz
print(graphviz.__version__)

!mkdir avocado

!unzip /content/drive/MyDrive/avocado.zip -d /content/avocado/

cd avocado/

import os
import time
import seaborn as sns
import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import warnings
import logging
from warnings import simplefilter
import random

warnings.filterwarnings('ignore')
logging.captureWarnings(True)
simplefilter(action='ignore', category=FutureWarning)

train_data = pd.read_csv('./Avocado.csv')

train_data

train_data = train_data.sample(frac=1).reset_index(drop=True)
train_data

test_data = train_data[16000:]
train_data = train_data[:8000]

test_data.shape

train_data.shape

print(train_data.dtypes)

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

train_data["Date"] = label_encoder.fit_transform(train_data["Date"])
train_data["type"] = label_encoder.fit_transform(train_data["type"])
train_data["region"] = label_encoder.fit_transform(train_data["region"])

test_data["Date"] = label_encoder.fit_transform(test_data["Date"])
test_data["type"] = label_encoder.fit_transform(test_data["type"])
test_data["region"] = label_encoder.fit_transform(test_data["region"])

print(train_data.dtypes)

target = train_data['AveragePrice']
train_data.drop(['AveragePrice'], inplace=True, axis=1)

X_train, X_test, y_train, y_test = train_test_split(train_data, target, test_size=0.25, random_state=42, shuffle=False)

X_train_with_target = X_train.copy()
X_train_with_target['AveragePrice'] = target

from autogluon.tabular import TabularPredictor as task

warnings.filterwarnings('ignore')
logging.captureWarnings(True)
simplefilter(action='ignore', category=FutureWarning)

save_path = 'avocado'
# autogluon needs target in the training_data
predictor = task(label='AveragePrice', path=save_path).fit(X_train_with_target)
y_preds_autogluon = predictor.predict(X_test)

y_preds_autogluon

best_model = None
best_model_name = None
best_model_r2 = 0.0

models = []

def validate_model(model_name, model, r2_score):
    global best_model, best_model_name, best_model_r2, models
    
    models.append([model_name, r2_score])

    print()
    print(f"Current r2 of model {model_name}: {r2_score}")
    print(f"Previous best r2 of model {best_model_name}: {best_model_r2}")

    if r2_score > best_model_r2:
        print(f"Improved previous r2!")
        best_model_r2 = r2_score
        best_model = model
        best_model_name = model_name
    else:
        print(f"Did not improve previous r2.")

r2 = r2_score(y_test, y_preds_autogluon)
validate_model('autogluon', predictor, r2)

print(predictor.leaderboard())

"""**Classification**"""

train_data2 = pd.read_csv('./Avocado.csv')
train_data2

train_data2 = train_data2.sample(frac=1).reset_index(drop=True)
train_data2

test_data2 = train_data2[:2000]
train_data2 = train_data2[8000:]

test_data2.shape

train_data2.shape

print(train_data2.dtypes)

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

train_data2["Date"] = label_encoder.fit_transform(train_data2["Date"])
train_data2["type"] = label_encoder.fit_transform(train_data2["type"])
train_data2["region"] = label_encoder.fit_transform(train_data2["region"])

test_data2["Date"] = label_encoder.fit_transform(test_data2["Date"])
test_data2["type"] = label_encoder.fit_transform(test_data2["type"])
test_data2["region"] = label_encoder.fit_transform(test_data2["region"])

print(train_data2.dtypes)

target = train_data2['type']
train_data2.drop(['type'], inplace=True, axis=1)

X_train, X_test, y_train, y_test = train_test_split(train_data2, target, test_size=0.25, random_state=42, shuffle=False)

best_model = None
best_model_name = None
best_model_acc = 0.0

models = []

def validate_model(model_name, model, accuracy):
    global best_model, best_model_name, best_model_acc, models
    
    models.append([model_name, accuracy])

    print()
    print(f"Current accuracy of model {model_name}: {accuracy}")
    print(f"Previous best accuracy of model {best_model_name}: {best_model_acc}")

    if accuracy > best_model_acc:
        print(f"Improved previous accuracy!")
        best_model_acc = accuracy
        best_model = model
        best_model_name = model_name
    else:
        print(f"Did not improve previous accuracy.")

from tpot import TPOTClassifier
warnings.filterwarnings('ignore')
logging.captureWarnings(True)
simplefilter(action='ignore', category=FutureWarning)

# set generations and population_size to prevent too long search (default 100 both)
tpot_classifier = TPOTClassifier(generations=10, population_size=10, verbosity=2, n_jobs=-1)
tpot_classifier.fit(X_train, y_train)
y_preds_tpot = tpot_classifier.predict(X_test)

tpot_classifier.export('tpot_pipeline.py')

accuracy = accuracy_score(y_test, y_preds_tpot)
validate_model('tpot', tpot_classifier, accuracy)

tpot_classifier

import autosklearn.classification
#warnings.filterwarnings('ignore')
#logging.captureWarnings(True)
#simplefilter(action='ignore', category=FutureWarning)

# set time_left_for_this_task to prevent trail getting stuck (default 3600 seconds)
auto_sklearn_model = autosklearn.classification.AutoSklearnClassifier(time_left_for_this_task=60, n_jobs=-1)

auto_sklearn_model.fit(X_train, y_train)
y_preds_autosklearn = auto_sklearn_model.predict(X_test)

accuracy = accuracy_score(y_test, y_preds_autosklearn)
validate_model('autosklearn', auto_sklearn_model, accuracy)

X_train_with_target = X_train.copy()
X_train_with_target['type'] = target

from autogluon.tabular import TabularPredictor as task
warnings.filterwarnings('ignore')
logging.captureWarnings(True)
simplefilter(action='ignore', category=FutureWarning)

save_path = 'avocado'
# autogluon needs target in the training_data
predictor = task(label='type', path=save_path).fit(X_train_with_target)
y_preds_autogluon = predictor.predict(X_test)

accuracy = accuracy_score(y_test, y_preds_autogluon)
validate_model('autogluon', predictor, accuracy)

print(predictor.leaderboard())

